import aiogram
import aiosqlite

from conf import TOKEN
from keyboards import *
from aiogram.dispatcher import FSMContext
from aiogram import Dispatcher, Bot, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup

storage = MemoryStorage()

admins = [6142402831, 1749015885]

bot: Bot = Bot(token=TOKEN)
dp: Dispatcher = Dispatcher(bot, storage=storage)

class raschetFSM(StatesGroup):
    price = State()
    tovar = State()
    dostavka = State()

class adminFSM(StatesGroup):
    key = State()
    value = State()
    agree = State()

@dp.message_handler(commands="start")
async def startCMD(message: types.Message):
    db = await aiosqlite.connect("data.db")
    cursor = await db.execute('SELECT value FROM data WHERE key="—Å—Å—ã–ª–∫–∞_–Ω–∞_–∫–∞–Ω–∞–ª"')
    link = await cursor.fetchone()
    link = link[0]

    cursor = await db.execute('SELECT value FROM data WHERE key="—Å—Å—ã–ª–∫–∞_–Ω–∞_–≤–ª–∞–¥–µ–ª—å—Ü–∞"')
    owner = await cursor.fetchone()
    owner = owner[0]

    cursor = await db.execute('SELECT value FROM data WHERE key="—Å—Å—ã–ª–∫–∞_–Ω–∞_–æ—Ç–∑—ã–≤—ã"')
    otzivi = await cursor.fetchone()
    otzivi = otzivi[0]

    cursor = await db.execute('SELECT value FROM data WHERE key="—Å—Å—ã–ª–∫–∞_–Ω–∞_–≤–æ–ø—Ä–æ—Å—ã_–∏_–æ—Ç–≤–µ—Ç—ã"')
    faq = await cursor.fetchone()
    faq = faq[0]

    await message.answer(f"""–ü—Ä–∏–≤–µ—Ç! –í—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ –±–æ—Ç–∞ Mz_Poizon.

–ù–∞—à –∫–∞–Ω–∞–ª üëâüèª https://t.me/{link}""")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=startKB(owner=owner, otzivi=otzivi, faq=faq))

    await db.close()

@dp.callback_query_handler(text="gde_brat")
async def gdeBratCMD(call: types.CallbackQuery):
    # await call.message.delete()
    db = await aiosqlite.connect("data.db")
    cursor = await db.execute('SELECT value FROM data WHERE key="—Å—Å—ã–ª–∫–∞_–Ω–∞_–∫–∞–Ω–∞–ª"')
    link = await cursor.fetchone()
    link = link[0]

    txt = rf"""–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è Android: https://clck.ru/3A4cgR
–ù–∏–∂–Ω—è—è —Å–∏–Ω—è—è –∫–Ω–æ–ø–∫–∞

–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è IOS: https://clck.ru/3A4ckf

–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –µ—Å—Ç—å –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ: https://t.me/{link}

–° –∫–∞—Ç–∞–ª–æ–≥–æ–º —Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –Ω–∞ poizon.com"""
    
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    await call.message.edit_text(txt, reply_markup=kb, disable_web_page_preview=True)
    await db.close()

@dp.callback_query_handler(text="main_menu")
async def mainMenuCMD(call: types.CallbackQuery):
    db = await aiosqlite.connect("data.db")
    cursor = await db.execute('SELECT value FROM data WHERE key="—Å—Å—ã–ª–∫–∞_–Ω–∞_–∫–∞–Ω–∞–ª"')
    link = await cursor.fetchone()
    link = link[0]

    cursor = await db.execute('SELECT value FROM data WHERE key="—Å—Å—ã–ª–∫–∞_–Ω–∞_–≤–ª–∞–¥–µ–ª—å—Ü–∞"')
    owner = await cursor.fetchone()
    owner = owner[0]

    cursor = await db.execute('SELECT value FROM data WHERE key="—Å—Å—ã–ª–∫–∞_–Ω–∞_–æ—Ç–∑—ã–≤—ã"')
    otzivi = await cursor.fetchone()
    otzivi = otzivi[0]

    cursor = await db.execute('SELECT value FROM data WHERE key="—Å—Å—ã–ª–∫–∞_–Ω–∞_–≤–æ–ø—Ä–æ—Å—ã_–∏_–æ—Ç–≤–µ—Ç—ã"')
    faq = await cursor.fetchone()
    faq = faq[0]

    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=startKB(owner=owner, faq=faq, otzivi=otzivi))

    await db.close()

@dp.callback_query_handler(text="sroki")
async def srokiCMD(call: types.CallbackQuery):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    await call.message.edit_text("""–î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –Ω–∞—à–µ–≥–æ —Å–∫–ª–∞–¥–∞ –≤ –ö–∏—Ç–∞–µ –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç 2 –¥–æ 6 –¥–Ω–µ–π, –∑–∞—Ç–µ–º –¥–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ —Å–∫–ª–∞–¥–∞ 12-25 –¥–Ω–µ–π, –≤ —Å—Ä–µ–¥–Ω–µ–º –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø–∞—Ä—Ç–∏–π –∏–¥—É—Ç 14 –¥–Ω–µ–π –¥–æ –ú–æ—Å–∫–≤—ã.
–î–∞–ª–µ–µ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –≤ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥ –º—ã –ø–µ—Ä–µ–¥–∞–µ–º –≤ –°–î–≠–ö –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å.""", reply_markup=kb)

@dp.callback_query_handler(text='raschet')
async def raschetCMD(call: types.CallbackQuery):
    photo = open("image.jpg", "rb").read()
    cap = """–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Å–µ–≥–¥–∞ –Ω–∞–¥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ—á–µ—Ä–∫–Ω—É—Ç—É—é —Ü–µ–Ω—É, –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–∞ –Ω–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ —É–∂–µ –Ω–µ—Ç —Å–∫–∏–¥–æ–∫ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await bot.send_photo(call.from_user.id, photo=photo, caption=cap)
    await call.message.delete()

    db = await aiosqlite.connect("data.db")
    cursor = await db.execute('SELECT value FROM data WHERE key="—Å—Å—ã–ª–∫–∞_–Ω–∞_–≤–ª–∞–¥–µ–ª—å—Ü–∞"')
    owner = await cursor.fetchone()
    owner = owner[0]
    await db.close()

    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton(text="–ì–¥–µ –≤–∑—è—Ç—å —Ü–µ–Ω—É", callback_data="gde_tsena"))
    kb.add(types.InlineKeyboardButton(text="üîî –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º", url=f"https://t.me/{owner}", callback_data="operator"))
    

    txt = """–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ —é–∞–Ω—è—Ö

‚ùóÔ∏è<i>–£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –±–µ–∑ –¥—Ä–æ–±–µ–π, –ø—Ä–æ–±–µ–ª–æ–≤, –±—É–∫–≤ –∏ –∑–Ω–∞–∫–æ–≤ –≤–∞–ª—é—Ç—ã. –ü—Ä–∏–º–µ—Ä: 1250</i>"""

    await call.message.answer(txt, reply_markup=kb, parse_mode=types.ParseMode.HTML)
    await raschetFSM.price.set()

@dp.message_handler(content_types="any", state=raschetFSM.price)
async def raschetFSMCMD(message: types.Message, state: FSMContext):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton(text='üö´ –û—Ç–º–µ–Ω–∞', callback_data="otmena"))

    if not (message.text):
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–º!", reply_markup=kb)
        return
    
    if not (message.text.isnumeric()):
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä!", reply_markup=kb)
        return
    
    db = await aiosqlite.connect('data.db')
    cursor = await db.execute('SELECT value FROM data WHERE key="–∫—É—Ä—Å_—é–∞–Ω—è"')
    uan = await cursor.fetchone()

    async with state.proxy() as data:
        data["price"] = int(int(message.text) * float(uan[0]))
        data["poizon"] = int(int(message.text) * float(uan[0]))

    

    kb1 = types.InlineKeyboardMarkup()
    kb1.add(types.InlineKeyboardButton(text="üëü –ö—Ä–æ—Å—Å–æ–≤–∫–∏", callback_data="v:kross"))
    kb1.add(types.InlineKeyboardButton(text="ü•æ –ö—Ä–æ-–∫–∏ –∑–∏–º–Ω–∏–µ, OldOrder | Osiris", callback_data="v:winterkros"))
    kb1.add(types.InlineKeyboardButton(text="ü•∑ –•—É–¥–∏, –¢–æ–ª—á—Ç–æ–≤–∫–∏, –°–ø–æ—Ä—Ç. —à—Ç–∞–Ω—ã", callback_data="v:hood"))
    kb1.add(types.InlineKeyboardButton(text="üëï –§—É—Ç–±–æ–ª–∫–∏, –®–æ—Ä—Ç—ã, –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã", callback_data="v:futbolk"))
    kb1.add(types.InlineKeyboardButton(text="üß• –ü—É—Ö–æ–≤–∏–∫–∏", callback_data="v:puhoviki"))
    kb1.add(types.InlineKeyboardButton(text="üëú –°—É–º–∫–∏, –†—é–∫–∑–∞–∫–∏ –Ω–µ–±–æ–ª—å—à–∏–µ", callback_data="v:summal"))
    kb1.add(types.InlineKeyboardButton(text="üéí –°—É–º–∫–∏, –†—é–∫–∑–∞–∫–∏ –±–æ–ª—å—à–∏–µ", callback_data="v:sumbol"))
    kb1.add(types.InlineKeyboardButton(text='üö´ –û—Ç–º–µ–Ω–∞', callback_data="otmena"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä, —á—Ç–æ–±—ã —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–∞—Å—Å—É:", reply_markup=kb1)
    await raschetFSM.next()

@dp.callback_query_handler(text_startswith="v:", state=raschetFSM.tovar)
async def viborCMD(call: types.CallbackQuery, state: FSMContext):

    data = call.data.split(":")[1]
    db = await aiosqlite.connect("data.db")
    cursor = await db.execute(f"SELECT value FROM data WHERE key='{data}'")
    value = await cursor.fetchone()
    value = value[0]

    cursor = await db.execute("SELECT value FROM data WHERE key='—Ü–µ–Ω–∞_–∑–∞_–∫–∏–ª–æ–≥—Ä–∞–º–º'")
    price_per_kg = await cursor.fetchone()
    price_per_kg = price_per_kg[0]
    # print(int(float(value) * int(price_per_kg)))
    async with state.proxy() as data:
        data['price'] += int(float(value) * int(price_per_kg))
        data['msk'] = int(float(value) * int(price_per_kg))

    cursor = await db.execute("SELECT value FROM data WHERE key='—Ü–µ–Ω–∞_–°–î–≠–ö_–ú–æ—Å–∫–≤–∞'")
    sdek = await cursor.fetchone()
    sdek = int(sdek[0])
    cursor = await db.execute("SELECT value FROM data WHERE key='—Ü–µ–Ω–∞_—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π_—Ä–µ–≥–∏–æ–Ω'")
    center = await cursor.fetchone()
    center = int(center[0])

    cursor = await db.execute("SELECT value FROM data WHERE key='—Ü–µ–Ω–∞_–¥—Ä—É–≥–∏–µ_—Ä–µ–≥–∏–æ–Ω—ã'")
    dr = await cursor.fetchone()
    dr = int(dr[0])

    cursor = await db.execute("SELECT value FROM data WHERE key='—Ü–µ–Ω–∞_—Å–∞–º–æ–≤—ã–≤–æ–∑'")
    sam = await cursor.fetchone()
    sam = int(sam[0])

    cursor = await db.execute("SELECT value FROM data WHERE key='–≥–æ—Ä–æ–¥_—Å–∞–º–æ–≤—ã–≤–æ–∑–∞'")
    city = await cursor.fetchone()


    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton(text=f"–°–î–≠–ö –ú–æ—Å–∫–≤–∞ {sdek}—Ä", callback_data='dost:sdek'))
    kb.add(types.InlineKeyboardButton(text=f"–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–µ–≥–∏–æ–Ω {center}", callback_data='dost:center'))
    kb.add(types.InlineKeyboardButton(text=f"–î—Ä—É–≥–∏–µ —Ä–µ–≥–∏–æ–Ω—ã {dr}+", callback_data='dost:other'))
    kb.add(types.InlineKeyboardButton(text=f"–°–∞–º–æ–≤—ã–≤–æ–∑", callback_data='dost:sam'))
    kb.add(types.InlineKeyboardButton(text='üö´ –û—Ç–º–µ–Ω–∞', callback_data="otmena"))

    await call.message.edit_text(f"""–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏
(—Ç–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç –±—É–¥–µ—Ç –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞)
–°–∞–º–æ–≤—ã–≤–æ–∑ - –±–µ—Å–ø–ª–∞—Ç–Ω–æ ({city[0]})""", reply_markup=kb)
    await db.close()
    await raschetFSM.next()


@dp.callback_query_handler(text_startswith="dost:", state=raschetFSM.dostavka)
async def dostCMD(call: types.CallbackQuery, state: FSMContext):
    data = call.data.split(":")[1]
    db = await aiosqlite.connect("data.db")
    if data == "sdek":
        cursor = await db.execute("SELECT value FROM data WHERE key='—Ü–µ–Ω–∞_–°–î–≠–ö_–ú–æ—Å–∫–≤–∞'")
    elif data == 'center':
        cursor = await db.execute("SELECT value FROM data WHERE key='—Ü–µ–Ω–∞_—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π_—Ä–µ–≥–∏–æ–Ω'")
    elif data == 'other':
        cursor = await db.execute("SELECT value FROM data WHERE key='—Ü–µ–Ω–∞_–¥—Ä—É–≥–∏–µ_—Ä–µ–≥–∏–æ–Ω—ã'")
    elif data == 'sam':
        cursor = await db.execute("SELECT value FROM data WHERE key='—Ü–µ–Ω–∞_—Å–∞–º–æ–≤—ã–≤–æ–∑'")
    pr = await cursor.fetchone()
    pr = int(pr[0])


    async with state.proxy() as data:
        data["price"] += pr
        price = data['price']
        poizon = int(data["poizon"])
        msk = data['msk']


    await state.finish()

    cursor = await db.execute("SELECT value FROM data WHERE key='–¥–æ—Å—Ç–∞–≤–∫–∞_–ø–æ_–∫–∏—Ç–∞—é'")
    china = await cursor.fetchone()
    china = int(china[0])


    cursor = await db.execute("SELECT value FROM data WHERE key='–ø—Ä–æ—Ü–µ–Ω—Ç_—Å—Ç—Ä–∞—Ö–æ–≤–∫–∏'")
    strah = await cursor.fetchone()
    strah = int(strah[0])

    cursor = await db.execute("SELECT value FROM data WHERE key='–∫–æ–º–∏—Å—Å–∏—è_—Å–µ—Ä–≤–∏—Å–∞'")
    kom = await cursor.fetchone()
    kom = int(kom[0])

    cursor = await db.execute("SELECT value FROM data WHERE key='–ø—Ä–æ—Ü–µ–Ω—Ç_–ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã'")
    pred = await cursor.fetchone()
    pred = int(pred[0]) / 100



    summa = poizon + china + msk + (poizon // 100 * strah) + kom + pr 


    cursor = await db.execute("SELECT value FROM data WHERE key='—Å—Å—ã–ª–∫–∞_–Ω–∞_–≤–ª–∞–¥–µ–ª—å—Ü–∞'")
    owner = await cursor.fetchone()
    owner = owner[0]
    
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="end:zakaz"))
    kb.add(types.InlineKeyboardButton(text="–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞", callback_data='end:raschet'))
    kb.add(types.InlineKeyboardButton(text='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data="main_menu"))
    kb.add(types.InlineKeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º", url=f'https://t.me/{owner}'))

    await call.message.edit_text(f"""–í–∞—à —Ä–∞—Å—á–µ—Ç –∑–∞–∫–∞–∑–∞:
- –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ Poizon {poizon} —Ä—É–±.
- –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ö–∏—Ç–∞—é {china} —Ä—É–±.
- –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ —Å–∫–ª–∞–¥–∞ –≤ –ú–æ—Å–∫–≤–µ {msk} —Ä—É–±.
- –°—Ç—Ä–∞—Ö–æ–≤–∫–∞ {strah}% - {poizon // 100 * strah} —Ä—É–±.
- –ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞ {kom} —Ä—É–±.
- –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –†–§ {pr} —Ä—É–±.

–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞: {summa} —Ä—É–±.
–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞: {int(summa * pred)} —Ä—É–±.

–ö–æ–º–∏—Å—Å–∏—é –º–æ–∂–Ω–æ —Å–Ω–∏–∑–∏—Ç—å –¥–æ {kom - 300} —Ä—É–±–ª–µ–π, –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —É—Ç–æ—á–Ω—è–π—Ç–µ —É –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ :)
–û–±—Ä–∞—â–∞–µ–º –í–∞—à–µ –≤–Ω–∏–º–∞–Ω–∏–µ: —Ä–∞—Å—á–µ—Ç –∞–∫—Ç—É–∞–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞, —Ç.–∫. –Ω–∞ Poizon —Ü–µ–Ω—ã —á–∞—Å—Ç–æ –º–µ–Ω—è—é—Ç—Å—è""", reply_markup=kb)


@dp.callback_query_handler(text_startswith='end:')
async def endCallCMD(call: types.CallbackQuery):
    db = await aiosqlite.connect('data.db')
    data = call.data.split(':')[1]
    if data == "raschet":
        await raschetCMD(call=call)
    elif data ==  "zakaz":
        cursor = await db.execute("SELECT value FROM data WHERE key='—Å—Å—ã–ª–∫–∞_–Ω–∞_–≤–ª–∞–¥–µ–ª—å—Ü–∞'")
        owner = await cursor.fetchone()
        owner = owner[0]
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é", url=f'https://t.me/{owner}'))
        kb.add(types.InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
        await call.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ (\"–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é\"), –∑–∞—Ç–µ–º –∫–Ω–æ–ø–∫—É ¬´–ù–∞—á–∞—Ç—å¬ª, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.", reply_markup=kb)
    

    

@dp.callback_query_handler(text="otmena", state=raschetFSM)
async def otmenaRaschetFSM(call: types.CallbackQuery, state: FSMContext):


    await state.finish()
    db = await aiosqlite.connect("data.db")
    cursor = await db.execute('SELECT value FROM data WHERE key="—Å—Å—ã–ª–∫–∞_–Ω–∞_–∫–∞–Ω–∞–ª"')
    link = await cursor.fetchone()
    link = link[0]

    cursor = await db.execute('SELECT value FROM data WHERE key="—Å—Å—ã–ª–∫–∞_–Ω–∞_–≤–ª–∞–¥–µ–ª—å—Ü–∞"')
    owner = await cursor.fetchone()
    owner = owner[0]

    cursor = await db.execute('SELECT value FROM data WHERE key="—Å—Å—ã–ª–∫–∞_–Ω–∞_–æ—Ç–∑—ã–≤—ã"')
    otzivi = await cursor.fetchone()
    otzivi = otzivi[0]

    cursor = await db.execute('SELECT value FROM data WHERE key="—Å—Å—ã–ª–∫–∞_–Ω–∞_–≤–æ–ø—Ä–æ—Å—ã_–∏_–æ—Ç–≤–µ—Ç—ã"')
    faq = await cursor.fetchone()
    faq = faq[0]

    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=startKB(owner=owner, otzivi=otzivi, faq=faq))

    await db.close()


@dp.callback_query_handler(text="gde_tsena", state=raschetFSM)
async def gdeTsenaCMD(call: types.CallbackQuery):
    

    db = await aiosqlite.connect("data.db")
    cursor = await db.execute('SELECT value FROM data WHERE key="—Å—Å—ã–ª–∫–∞_–Ω–∞_–∫–∞–Ω–∞–ª"')
    link = await cursor.fetchone()
    link = link[0]

    txt = rf"""–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è Android: https://clck.ru/3A4cgR
–ù–∏–∂–Ω—è—è —Å–∏–Ω—è—è –∫–Ω–æ–ø–∫–∞

–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è IOS: https://clck.ru/3A4ckf

–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –µ—Å—Ç—å –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ: https://t.me/{link}

–° –∫–∞—Ç–∞–ª–æ–≥–æ–º —Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –Ω–∞ poizon.com"""
    
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back"))
    
    await call.message.answer(txt, disable_web_page_preview=True, reply_markup=kb)
    await call.message.delete()

@dp.callback_query_handler(text="back", state=raschetFSM)
async def backCMD(call: types.CallbackQuery):
    db = await aiosqlite.connect("data.db")
    cursor = await db.execute('SELECT value FROM data WHERE key="—Å—Å—ã–ª–∫–∞_–Ω–∞_–≤–ª–∞–¥–µ–ª—å—Ü–∞"')
    owner = await cursor.fetchone()
    owner = owner[0]
    await db.close()

    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton(text="–ì–¥–µ –≤–∑—è—Ç—å —Ü–µ–Ω—É", callback_data="gde_tsena"))
    kb.add(types.InlineKeyboardButton(text="üîî –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º", url=f"https://t.me/{owner}", callback_data="operator"))
    

    txt = """–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ —é–∞–Ω—è—Ö

‚ùóÔ∏è<i>–£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –±–µ–∑ –¥—Ä–æ–±–µ–π, –ø—Ä–æ–±–µ–ª–æ–≤, –±—É–∫–≤ –∏ –∑–Ω–∞–∫–æ–≤ –≤–∞–ª—é—Ç—ã. –ü—Ä–∏–º–µ—Ä: 1250</i>"""

    await call.message.answer(txt, reply_markup=kb, parse_mode=types.ParseMode.HTML)
    await db.close()
    await call.message.delete()

@dp.message_handler(commands=['admin'])
async def adminCMD(message: types.Message):
    if not message.from_user.id in admins:
        return
    db = await aiosqlite.connect("data.db")

    cursor = await db.execute("SELECT key FROM data")
    alldata = await cursor.fetchall()

    kb = types.ReplyKeyboardMarkup()

    for i in alldata:
        kb.add(types.KeyboardButton(i[0]))
    

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ:", reply_markup=kb)
    await adminFSM.key.set()

    await db.close()

@dp.message_handler(content_types=['text'], state=adminFSM.key)
async def adminKeyCMD(message: types.Message, state: FSMContext):
    db = await aiosqlite.connect("data.db")

    cursor = await db.execute("SELECT key FROM data")
    alldata = await cursor.fetchall()
    alldata = [i[0] for i in alldata]

    if not message.text in alldata:
        await message.answer("–¢–∞–∫–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ", reply_markup=types.ReplyKeyboardRemove())
        await state.finish()
        return
    
    async with state.proxy() as data:
        data['key'] = message.text

    await db.close()
    await message.answer(f"–ò–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ {message.text} –Ω–∞ ...", reply_markup=types.ReplyKeyboardRemove())
    await adminFSM.next()


@dp.message_handler(content_types='text', state=adminFSM.value)
async def adminValueCMD(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['value'] = message.text
        key = data['key']

    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton(text="–î–∞", callback_data="admin:yes"))
    kb.insert(types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="admin:no"))
    await message.answer(f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ {key} –Ω–∞ {message.text}", reply_markup=kb)
    await adminFSM.next()

@dp.callback_query_handler(text_startswith="admin:", state=adminFSM.agree)
async def agreeAdminFSM(call: types.CallbackQuery, state: FSMContext):
    data = call.data.split(':')[1]
    if data == 'yes':
        db = await aiosqlite.connect("data.db")
        async with state.proxy() as data:
            value = data['value']
            key = data['key']

        await db.execute(f'UPDATE data SET value="{value}" WHERE key="{key}"')
        await db.commit()
        await db.close()
        await call.message.answer(f"–ó–Ω–∞—á–µ–Ω–∏–µ \"{key}\" —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ")
    else:
        await call.message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ...")
    await state.finish()


if __name__ == "__main__":
    aiogram.executor.start_polling(dispatcher=dp, skip_updates=True)     